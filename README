5 Pages in App:
  - daily page
  - home page
  - log page
  - login page
  - transaction page

-------Set Up-------
Since the app is still in development phase, the program is only executable on an emulator. Install Android & Ios emulator extension on VScode or Android Studio. With the emulator opened, run the main.dart file located in flutter_finance_app_ui-main/lib. 
-------Dependencies-------
All the dependencies required for the program to run should already by included inside the pubspec.yaml file. If any dependencies do not work, please use the command flutter pub add <dependency>.
-------Home page & Coupons page-------

Home Page Description:
Users are directed to this page after log in. Home page gives users an overview of their spendings and funds available. Users will have the choice to other pages by navigating the icon bar at the bottom or interact with the icons at the top. 

Home Page Functionalities:
- Data on expenses and cash available is retrieved from database using getPurchase() and getPurchaseByID()
- Data on history of money outflow and inflow retrieved from database using getPurchase()

Coupons Page Description:
Upon entering this page, the default view of the page is a list of all coupons available today. Users have the choice to sort the list by categorizing the coupons in terms of Online Shopping or food. Users can interact with the page by clicking on a coupon box and direct them to the online shop.

Coupons Page Functionalities:
- Utilizes cheapshark public API to retrieve data on deals.
- Convert data into JSON format with the following attributes, title, salePrice, and savings, and display it in listview.
- Click on coupon box to navigate to the shop website.


-------Database-------

This app uses a persistent SQLite database to store all input purchases in a
List<Map> format. This database contains all information that various app pages
pull from to make their graphics and tables.

Database Functionality:
- database defined in "Database.dart"
- functions to interact w/ database:
    addPurchase(String name, double price, String category)
      ~ adds a purchase to database
      ~ returns ID of purchase in database
      ~ return type: int

    getPurchase()
      ~ returns all purchases in database
      ~ Refer to Step 6: https://docs.flutter.dev/cookbook/persistence/sqlite
      ~ return type: List<Map<String, dynamic>>

    getPurchaseByID(int id)
      ~ returns a single purchase by ID
      ~ return type: List<Map<String, dynamic>>

    updateItem(int id, String name, double price, String category)
      ~ updates a purchase specified by ID
      ~ returns ID of purchase
      ~ return type: int

    deletePurchase(int id)
      ~ deletes purchase from database
      ~ return type: void




